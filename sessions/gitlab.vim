" ~\vimfiles\sessions\gitlab.vim:
" Vim session script.
" Created by session.vim 2.13.1 on 27 June 2017 at 17:05:31.
" Open this file in Vim and run :source % to restore your session.

set guioptions=egmrLT
silent! set guifont=Consolas:h9:cANSI:qDRAFT
if exists('g:syntax_on') != 1 | syntax on | endif
if exists('g:did_load_filetypes') != 1 | filetype on | endif
if exists('g:did_load_ftplugin') != 1 | filetype plugin on | endif
if exists('g:did_indent_on') != 1 | filetype indent on | endif
if &background != 'dark'
	set background=dark
endif
if !exists('g:colors_name') || g:colors_name != 'desert' | colorscheme desert | endif
call setqflist([])
let SessionLoad = 1
if &cp | set nocp | endif
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd C:\backhoe\src\main\java
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +17 br\ufrn\backhoe\repminer\miner\wontfix_survey\FetchJiraHtmls.java
badd +39 \Program\ Files\ (x86)\Vim\_vimrc
badd +2 \backhoe\current_paths.txt
badd +131 br\ufrn\backhoe\repminer\miner\milestones_project\FetchProjectNames.java
badd +1 br\ufrn\backhoe\repminer\factory\connector\JiraConnectorFactory.java
badd +7 br\ufrn\backhoe\repminer\factory\connector\GitlabConnectorFactory.java
badd +8 br\ufrn\backhoe\repminer\factory\connector\MozillaBugzillaConnectorFactory.java
badd +157 br\ufrn\backhoe\repminer\connector\GitlabConnector.java
badd +74 br\ufrn\backhoe\repminer\miner\bugsinreleases\ExtractBugsHtmlImport.java
badd +86 br\ufrn\backhoe\repminer\miner\bugsinreleases\ExtractBugsHtmlLoginImport.java
badd +1 br\ufrn\backhoe\repminer\connector\JiraConnector.java
badd +169 br\ufrn\backhoe\repminer\connector\MozillaBugzillaConnector.java
argglobal
silent! argdel *
edit br\ufrn\backhoe\repminer\connector\GitlabConnector.java
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winminheight=1 winheight=1 winminwidth=1 winwidth=1
exe 'vert 1resize ' . ((&columns * 31 + 38) / 77)
exe 'vert 2resize ' . ((&columns * 45 + 38) / 77)
argglobal
enew
" file NERD_tree_1
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal nofen
wincmd w
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 91 - ((8 * winheight(0) + 11) / 23)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
91
normal! 026|
wincmd w
2wincmd w
exe 'vert 1resize ' . ((&columns * 31 + 38) / 77)
exe 'vert 2resize ' . ((&columns * 45 + 38) / 77)
tabnext 1
if exists('s:wipebuf')
"   silent exe 'bwipe ' . s:wipebuf
endif
" unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
set winminheight=1 winminwidth=1
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save

" Support for special windows like quick-fix and plug-in windows.
" Everything down here is generated by vim-session (not supported
" by :mksession out of the box).

1wincmd w
tabnext 1
let s:bufnr_save = bufnr("%")
let s:cwd_save = getcwd()
NERDTree C:\backhoe\src\main\java
if !getbufvar(s:bufnr_save, '&modified')
  let s:wipebuflines = getbufline(s:bufnr_save, 1, '$')
  if len(s:wipebuflines) <= 1 && empty(get(s:wipebuflines, 0, ''))
    silent execute 'bwipeout' s:bufnr_save
  endif
endif
execute "cd" fnameescape(s:cwd_save)
1resize 23|vert 1resize 31|2resize 23|vert 2resize 45|
2wincmd w
tabnext 1
if exists('s:wipebuf')
  if empty(bufname(s:wipebuf))
if !getbufvar(s:wipebuf, '&modified')
  let s:wipebuflines = getbufline(s:wipebuf, 1, '$')
  if len(s:wipebuflines) <= 1 && empty(get(s:wipebuflines, 0, ''))
    silent execute 'bwipeout' s:wipebuf
  endif
endif
  endif
endif
doautoall SessionLoadPost
unlet SessionLoad
" vim: ft=vim ro nowrap smc=128
